import { useState } from "react";
import Sidebar from "../components/Sidebar";
import { fetchAISuggestions } from "../utils/api";
import styles from "../styles/ai.module.css";
import { FaDownload, FaRobot } from "react-icons/fa";
import jsPDF from "jspdf";
import "jspdf/dist/jspdf.umd.min.js";
import Popup from "../components/Popup";
import Link from "next/link";

const AISuggestions = () => {
  const [userId, setUserId] = useState("");
  const [suggestions, setSuggestions] = useState("");
  const [showPopup, setShowPopup] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");

  const processSuggestions = (text: string) => {
    return text.split('**').map((part, index) => {
      if (index % 2 === 1) {
        return <strong key={index}>{part}</strong>;
      }
      return part;
    });
  };

  const handleGetSuggestions = async () => {
    try {
      const response = await fetchAISuggestions(userId);
      if (response.message === "No transaction data found") {
        setErrorMessage("User not found or no transaction data available. Please check your User ID and try again.");
        setShowPopup(true);
        setSuggestions("");
        return;
      }
      setSuggestions(response.suggestions);
    } catch (error) {
      setErrorMessage("An error occurred while fetching suggestions. Please try again later.");
      setShowPopup(true);
      setSuggestions("");
    }
  };

  const handleDownloadReport = () => {
    if (!suggestions) return;

    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - 2 * margin;
    const contentHeight = pageHeight - 2 * margin;

    // Add header
    doc.setFontSize(24);
    doc.setFont("helvetica", "bold");
    doc.text("MoneyWise AI Financial Report", margin, margin + 20);
    
    // Add divider line
    doc.setLineWidth(1);
    doc.line(margin, margin + 25, pageWidth - margin, margin + 25);

    // Add report details
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text(`Generated on: ${new Date().toLocaleString()}`, margin, margin + 40);
    doc.text(`User ID: ${userId}`, margin, margin + 50);

    // Add content section
    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    doc.text("AI-Powered Financial Suggestions", margin, margin + 70);

    // Process and add suggestions
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    
    // Split suggestions into paragraphs and process bold text
    const paragraphs = suggestions.split('\n\n');
    let yPosition = margin + 85;
    
    paragraphs.forEach(paragraph => {
      if (paragraph.trim()) {
        // Process bold text within paragraphs
        const parts = paragraph.split('**');
        let currentX = margin;
        
        parts.forEach((part, index) => {
          if (part.trim()) {
            // Set font style based on whether it's bold or not
            if (index % 2 === 1) {
              doc.setFont("helvetica", "bold");
            } else {
              doc.setFont("helvetica", "normal");
            }

            // Split text into lines to handle wrapping
            const lines = doc.splitTextToSize(part, contentWidth);
            
            // Check if we need a new page
            if (yPosition + (lines.length * 7) > pageHeight - margin) {
              doc.addPage();
              yPosition = margin + 20;
            }

            // Add the text
            doc.text(lines, currentX, yPosition);
            yPosition += (lines.length * 7) + 5;
          }
        });
        
        // Add extra spacing between paragraphs
        yPosition += 10;
      }
    });

    // Add footer
    const footerY = pageHeight - margin;
    doc.setFontSize(10);
    doc.setFont("helvetica", "italic");
    doc.text("This report was generated by MoneyWise AI Assistant", margin, footerY - 10);
    doc.text("For more information, visit www.moneywise.com", margin, footerY);

    // Save the PDF
    doc.save(`moneywise-suggestions-${new Date().toISOString().split('T')[0]}.pdf`);
  };

  return (
    <div>
      <Sidebar />
      <div className={styles.container}>
        <div className={styles.header}>
          <h2 className={styles.heading}>Get AI-Powered Financial Suggestions</h2>
          <Link href="/chatbot" className={styles.chatbotButton}>
            <FaRobot className={styles.chatbotIcon} />
            Chat with AI Assistant
          </Link>
        </div>
        <input
          className={styles.inputField}
          type="text"
          placeholder="Enter User ID"
          value={userId}
          onChange={(e) => setUserId(e.target.value)}
        />
        <button className={styles.suggestButton} onClick={handleGetSuggestions}>
          Give Me Suggestions
        </button>
        {suggestions && (
          <div className={styles.resultContainer}>
            <div className={styles.result}>{processSuggestions(suggestions)}</div>
            <button className={styles.downloadButton} onClick={handleDownloadReport}>
              <FaDownload /> Download PDF Report
            </button>
          </div>
        )}
      </div>
      {showPopup && (
        <Popup
          message={errorMessage}
          onClose={() => setShowPopup(false)}
        />
      )}
    </div>
  );
};

export default AISuggestions;
